#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <omp.h>

void getAveragetime();
double timeCalculation();
double **createMatrix(int value);
void getTranspose(int size, double **matrix);
void optimized_matrix_multiply(int N, double **matrix_C, double **matrix_A, double **matrix_B);
void empty_matrix(double **matrix);

int N;
int sample_size;
double **matrix_A;//input matrix 1
double **matrix_B;//input matrix 2
double **matrix_C;//output matrix

int main(int argc, char* argv[])
{
    for(N=200;N<=2000;N+=200){
	sample_size=50;
        int nthreads = 8;
        omp_set_num_threads(nthreads);								
	getAveragetime();
    }

    return 0;
}

/*
calculate the average time consumption
*/
void getAveragetime(){

    double total = 0.0;
	int p;
    for (p = 0; p < sample_size; p++) {
        total += timeCalculation();
    }

    double average = total / sample_size;
    printf("Optimized parallel time consumption matrix size %d : %f seconds\n", N,average);

}

/*
calculate time for one multiplication
*/
double timeCalculation() {	
    srand((unsigned) time(0));
    double timeval, start, stop;
    matrix_A=createMatrix(1);
    matrix_B=createMatrix(1);
    matrix_C=createMatrix(0);
    start = omp_get_wtime();
    optimized_matrix_multiply(N,matrix_C,matrix_A,matrix_B);

    stop = omp_get_wtime();

    // calculate the time consumption
    timeval = (stop - start);
    //empty matrix memory
    empty_matrix(matrix_A);
    empty_matrix(matrix_B);
    empty_matrix(matrix_C);

    return timeval;
}

/*
allocate memory for matrixes & asign values
*/
double **createMatrix(int value){
	int i,j;
	double **matrix;
	if(value==1){

        matrix = (double **)malloc(sizeof(double *)*N);                                 
        for(i=0; i<N; i++)
                matrix[i] = (double *)malloc(sizeof(double)*N);
	for (i= 0; i< N; i++) {
        for (j = 0; j < N; j++) {
            matrix[i][j] = (double)rand();
        }
    }

	}else{
	 matrix = (double **)malloc(sizeof(double *)*N);                                 
        for(i=0; i<N; i++)
                matrix[i] = (double *)malloc(sizeof(double)*N);

	}
	return matrix;
}

/*
get transpose of a matrix
*/
void getTranspose(int size, double **matrix)								
{
    int i,j;
    for (i = 0; i < size; i++) {
        for (j = i + 1; j < size; j++) {
            double temp = matrix[i][j];
            matrix[i][j] = matrix[j][i];
            matrix[j][i] = temp;
        }
    }
}


/*
Optimized matrix multiplication
*/
void optimized_matrix_multiply(int N, double **matrix_C, double **matrix_A, double **matrix_B)			
{
    int i,j,k;
    getTranspose(N,matrix_B);													
    #pragma omp parallel for private(i,j, k)						
    for(i=0; i<N; i++)
    {
        for(j=0; j<N; j++)
        {
            double temp = 0;										
            for(k=0; k<N; k++)
                temp += matrix_A[i][k] * matrix_B[j][k];							
            matrix_C[i][j] = temp;			
        }
    }
    return;
}

/*
clean the matrix memory
*/
void empty_matrix(double **matrix) {
int i;
    for (i = 0; i < N; i++) {
        free(matrix[i]);
    }
    free(matrix);
}

